#!/usr/bin/env bash

sourceable_script='false'

if [[ "$sourceable_script" != 'true' && ! "${BASH_SOURCE[0]}" -ef "$0" ]]
then
    echo "Do not source this script! Execute it with bash instead."
    return 1
fi
unset sourceable_script

########################
### Library sourcing ###
########################

library_sourcing()
{
    # Unset as only called once and most likely overwritten when sourcing libs
    unset -f library_sourcing

    local -r THIS_SCRIPT_PATH="$(tmp_find_script_path)"

    # Store $THIS_SCRIPT_PATH as unique or local variables
    # LIB_PATH is needed by sourced libraries as well
    readonly PROJECT_BASE_PATH="$THIS_SCRIPT_PATH"
    export PROJECT_BASE_PATH
    readonly LIB_PATH="$THIS_SCRIPT_PATH/lib"
    export LIB_PATH

    ### Source libraries ###
    source "$LIB_PATH/lib_core.bash" || exit
    # source_lib "$LIB_PATH/lib_handle_input.bash"
}

# Minimal version of find_path(). Should only be used within this script to source library defining find_path().
tmp_find_script_path() {
    unset -f tmp_find_script_path; local s="${BASH_SOURCE[0]}"; local d
    while [ -L "$s" ]; do d=$(cd -P "$(dirname "$s")" &>/dev/null && pwd); s=$(readlink "$s"); [[ $s != /* ]] && s=$d/$s; done
    echo "$(cd -P "$(dirname "$s")" &>/dev/null && pwd)"
}

library_sourcing

########################
### GLOBAL CONSTANTS ###
########################

readonly MOVE_CURSOR_UP='\033[1F'
readonly MOVE_CURSOR_DOWN='\033[1E'
readonly CLEAR_TO_END_OF_LINE='\033[K'

readonly STATUS_NONE=''
readonly STATUS_ON_TRACK='ON TRACK'
readonly STATUS_NO_REMOTE='NO REMOTE'
readonly STATUS_DELETED_REMOTE='DELETED REMOTE'
readonly STATUS_AHEAD_BEHIND='AHEAD BEHIND'
readonly STATUS_NO_LOCAL='NO LOCAL'

############
### MAIN ###
############


main()
{
    _handle_args_main "$@"
    # Output:
    # - base_dir (Optional)

    local -r tmpdir=$(mktemp -d)

    local num_processes_done=0
    local num_total_processes=0
    local indicator
    local indicator_counter=0
    local num_processes_done=0
    local num_processes_done_previous_iteration=0
    local counter_iterations_same_num_processes=0

    local processes_id=()
    local processes_name=()
    local processes_done=()
    local process_indicated_stuck=()

    local repositories=()

    find_repositories

    for repo in "${repositories[@]}"
    do
        sanitized_filename=$(create_sanitized_filename "$repo")

        # Background process
        handle_git_repo "$repo" "$tmpdir/$sanitized_filename" </dev/null &

        processes_id+=( "$!" )
        processes_name+=( "$repo" )
        processes_done+=( 'false' )
        process_indicated_stuck+=( 'false' )
        ((num_total_processes++))
    done

    printf '\n\n'

    while ((num_processes_done != num_total_processes ))
    do
        update_indicator_state

        update_repositories_checked_loading_bar

        is_all_processes_done && break

        update_stuck_statistics

        sleep 0.1
    done

    update_repositories_checked_loading_bar

    output_from_background_jobs

    rm -rf "$tmpdir"
}

###################
### END OF MAIN ###
###################

register_help_text 'git status-recursive' <<-'END_OF_HELP_TEXT'
git status-recursive [flags] [DIR]

Used for finding out the git status of multiple repositories recursively down from the
current or specified directory.

[DIR] (Optional): Directory to run recursively down the directory structure from
END_OF_HELP_TEXT

register_function_flags 'git status-recursive' \
                        '-v' '--verbose' 'false' \
                        "Verbose file status" \
                        '' '--no-fetch' 'false' \
                        "Don't fetch before checking repository status" \
                        '-p' '--prune' 'false' \
                        "Prune while fetching. E.g. removes upstream deleted branches" \
                        '-c' '--only-current-branch' 'false' \
                        "Only check the currently checked out branch" \
                        '-f' '--only-file-changes' 'false' \
                        "Only check for file changes" \
                        '' '--on-track' 'false' \
                        "Show branches which are on track" \
                        '' '--exclude-no-news' 'false' \
                        "Don't print repositories which got nothing new to update about." \
                        '' '--exclude-submodule' 'false' \
                        "Don't check the status of git submodules" \
                        '' '--exclude-no-local' 'false' \
                        "Don't check for remote branches which aren't available locally" \
                        '' '--exclude-no-remote' 'false' \
                        "Don't check for local branches which aren't available on the remote" \
                        '' '--exclude-deleted-remote' 'false' \
                        "Don't check for local branches which have had their remote branch deleted"

_handle_args_main()
{
    _handle_args 'git status-recursive' "$@"

    ###
    # Non-flagged arguments
    if (( ${#non_flagged_args[@]} != 0 ))
    then
        main_input_dir=${non_flagged_args[0]}
        if ! [[ -d "$main_input_dir" ]]
        then
            define error_info << END_OF_ERROR_INFO
Given [ DIR ] is not a directory: '$main_input_dir'
END_OF_ERROR_INFO
            invalid_function_usage 2 "git status-recursive" "$error_info"
            exit 1
        fi
    fi

    [[ -n "$main_input_dir" ]] && base_dir="$main_input_dir" || base_dir='.' 

    ###
    # -v, --verbose
    if [[ "$verbose_flag" == 'true' ]]
    then
        verbose='true'
    fi

    ###
    # --no-fetch
    if [[ "$no_fetch_flag" == 'true' ]]
    then
        no_fetch='true'
    fi

    ###
    # -p, --prune
    if [[ "$prune_flag" == 'true' ]]
    then
        do_prune='true'
    fi

    ###
    # -c, --only-current-branch
    if [[ "$only_current_branch_flag" == 'true' ]]
    then
        only_current_branch='true'
    fi

    ###
    # -c, --only-file-changes
    if [[ "$only_file_changes_flag" == 'true' ]]
    then
        only_file_changes='true'
    fi

    ###
    # --on-track
    if [[ "$on_track_flag" == 'true' ]]
    then
        show_on_track='true'
    fi

    ###
    # --exclude-no-news
    if [[ "$exclude_no_news_flag" == 'true' ]]
    then
        exclude_no_news='true'
    fi

    ###
    # --exclude-submodule
    if [[ "$exclude_submodule_flag" == 'true' ]]
    then
        exclude_submodule='true'
    fi

    ###
    # --exclude-no-local
    if [[ "$exclude_no_local_flag" == 'true' ]]
    then
        exclude_no_local='true'
    fi

    ###
    # --exclude-no-remote
    if [[ "$exclude_no_remote_flag" == 'true' ]]
    then
        exclude_no_remote='true'
    fi

    ###
    # --exclude-deleted-remote
    if [[ "$exclude_deleted_remote_flag" == 'true' ]]
    then
        exclude_deleted_remote='true'
    fi

    _post_handle_flags
}

_post_handle_flags()
{
    show_branches_ahead_behind='true'

    if [[ "$only_current_branch" == 'true' ]]
    then
        show_on_track='false'
        exclude_deleted_remote='false'
        exclude_no_remote='false'
        exclude_no_local='false'
        show_branches_ahead_behind='false'
    fi

    if [[ "$only_file_changes" == 'true' ]]
    then
        show_on_track='false'
        exclude_deleted_remote='false'
        exclude_no_remote='false'
        exclude_no_local='false'
        show_branches_ahead_behind='false'
    fi
}

colorize()
{
    while IFS= read -r line; do
        echo -e "${1}${line}${COLOR_END}"
    done
}

create_sanitized_filename()
{
    local new_name
    [[ "$1" == "./.git" ]] && new_name="$(pwd)" || new_name="$1"

    # Remove potential /.git suffix, strip leading ./ from the path, and replace / with _
    new_name=$(echo "$new_name" | sed 's/\/\.git$//' | sed 's/^.\///' | sed 's/\//__/g')
    echo "$new_name"
}

convert_porcelain_status()
{
    local status_indicator="$1"

    local plus="${COLOR_GREEN}+${COLOR_END}"
    local asterix="${COLOR_RED}*${COLOR_END}"
    local percentage="${COLOR_RED}%${COLOR_END}"

    case "$status_indicator" in
        ' M'|' T'|' D')
            # Unstaged changes
            echo -e "${asterix} "
            ;;
        'M '|'A '|'R '|'C ')
            # Staged changes
            echo -e "${plus} "
            ;;
        'MM'|'MT'|'MD'|'AM'|'AD'|'RM'|'CM'|'TM'|'TD')
            # Staged and modified in worktree
            echo -e "${plus}${asterix}"
            ;;
        '??')
            # Untracked files
            echo -e "${percentage}"
            ;;
        'UU'|'DD'|'AU'|'UD'|'UA'|'DU'|'AA')
            # Unmerged states
            echo -e "${COLOR_RED}MERGE${COLOR_END}"
            ;;
        '  ')
            # Unmodified
            echo '  ';;
        '!!')
            # Ignored files
            echo '  '
            ;;
        *)
            # Any other state not handled
            echo -e "${COLOR_RED}UNKOWN${COLOR_END}"
            ;;
    esac

    return 0
}

convert_porcelain_status_verbose()
{
    local status_indicator="$1"

    local index_indicator="${status_indicator:0:1}"
    local worktree_indicator="${status_indicator:1:1}"

    [[ -z "$index_indicator" ]] && [[ -z "$worktree_indicator" ]] && return 1

    if [[ "$status_indicator" == '??' ]]
    then
        echo -e "${COLOR_RED}[[      UNTRACKED      ]]${COLOR_END}"
        return 0
    fi

    local output=""
    local change
    local color
    for indicator in "$index_indicator" "$worktree_indicator"
    do
        [[ "$indicator" == "$worktree_indicator" ]] && color="$COLOR_RED"
        [[ "$indicator" == "$index_indicator" ]] && color="$COLOR_GREEN"

        case "$indicator" in
            'M')
                change='true'
                output+="${color}[ CHANGED  ]${COLOR_END}" ;;
            'A')
                change='true'
                output+="${color}[  ADDED   ]${COLOR_END}" ;;
            'D')
                change='true'
                output+="${color}[ DELETED  ]${COLOR_END}" ;;
            'R')
                change='true'
                output+="${color}[ RENAMED  ]${COLOR_END}" ;;
            'C')
                change='true'
                output+="${color}[ COPIED   ]${COLOR_END}" ;;
            'U')
                change='true'
                output+="${color}[ UNMERGED ]${COLOR_END}" ;;
            ' ')
                output+='[    --    ]'
                change='false'
                ;;
            *)
                change='true'
                output+="${COLOR_RED}[ UNKNOWN  ]${COLOR_END}" ;;
        esac
    done

    echo -e "$output"
}

index_working_tree_status()
{
    local porcelain_status=$(git status --porcelain)

    if [[ -z "$porcelain_status" ]]
    then
        [[ "$verbose" == 'true' ]] && echo -e "\n[NO CHANGES]"
        return 0
    fi
    [[ "$verbose" == 'true' ]] && echo
    [[ "$verbose" == 'true' ]] && echo "[  Index   ][ Worktree ] <File>"

    while IFS= read -r line # <<< "$porcelain_status"
    do
        local status_indicator="${line:0:2}"
        local index_indicator="${status_indicator:0:1}"
        local worktree_indicator="${status_indicator:1:1}"
        local file="${line:3}"

        local converted_indicators
        if [[ "$verbose" == 'true' ]]
        then
            converted_indicators=$(convert_porcelain_status_verbose "$status_indicator")
        else
            converted_indicators=$(convert_porcelain_status "$status_indicator")
        fi

        echo "${converted_indicators} ${file}"

    done <<< "$porcelain_status"
}

get_info_local_branch()
{
    local local_branch="$1"

    array_local_branch+=("$local_branch")

    local branch_info
    branch_info=$(git for-each-ref --format="%(upstream:short) %(upstream:track)" refs/heads/$local_branch)

    # Define 'remote', 'tracking_info'
    local remote tracking_info
    IFS=' ' read -r remote tracking_info <<< "$branch_info"

    local remote_name="${remote%%/*}"
    local remote_branch="${remote#*/}"
    local num_ahead_remote=0
    local num_behind_remote=0

    if [[ "$tracking_info" == '[gone]' ]]
    then # Branch removed from remote repo
        num_ahead_remote='_'
        num_behind_remote='_'
        remote_branch='[gone]'
    elif [[ -n "$tracking_info" ]]
    then
        num_ahead_remote="$(grep -Po '(?<=ahead )\d+' <<< "$tracking_info")"
        num_behind_remote="$(grep -Po '(?<=behind )\d+' <<< "$tracking_info")"

        # Check if fast-forward merge is possible by checking:
        # * Remote branch is an ancestor of local branch
        # * Work-tree is clean
        if git merge-base --is-ancestor "$remote_branch" "$local_branch" &&
            git diff-index --quiet HEAD --
        then
            ff_merge_possible='true'
        fi
    fi

    array_remote_name+=("$remote_name")
    array_remote_branch+=("$remote_branch")

    array_num_ahead_remote+=($num_ahead_remote)
    array_num_behind_remote+=($num_behind_remote)

    array_ff_merge_possible+=("$ff_merge_possible")
}

get_info_remote_branch()
{
    local remote_branch="$1"

    check_remote_branch_exists_locally "$remote_branch" &&
        array_remote_branches_without_local+=('true') ||
        array_remote_branches_without_local+=('false')
}

check_remote_branch_exists_locally()
{
    local remote_branch="$1"

    # Check if any local branch tracks the current remote branch
    local local_branch
    local_branch=$(git for-each-ref --format '%(refname:short) %(upstream:short)' refs/heads/ | grep " $remote_branch$"  | cut -d' ' -f1)

    [[ -n "$local_branch" ]]
}

# Output in variables
# - 'formatted_output'
# - 'formatted_output_status'
format_local_branch_output_string()
{
    local array_index=$1

    local local_branch="${array_local_branch[array_index]}"
    local remote_name="${array_remote_name[array_index]}"
    local remote_branch="${array_remote_branch[array_index]}"
    local num_ahead_remote="${array_num_ahead_remote[array_index]}"
    local num_behind_remote="${array_num_behind_remote[array_index]}"
    local ff_merge_possible="${array_ff_merge_possible[array_index]}"

    formatted_output=''
    formatted_output_status="$STATUS_NONE"

    if [[ -z "$remote_branch" ]]
    then # No remote
        formatted_output_status="$STATUS_NO_REMOTE"
        formatted_output="${COLOR_RED}[$formatted_output_status]${COLOR_END} $local_branch"
        return
    fi

    if [[ "$remote_branch" == '[gone]' ]]
    then
        formatted_output_status="$STATUS_DELETED_REMOTE"
        formatted_output="${COLOR_RED}[$formatted_output_status]${COLOR_END} $local_branch"
        return
    fi

    if (( num_ahead_remote == 0 && num_behind_remote == 0 ))
    then # On track with remote
        formatted_output_status="$STATUS_ON_TRACK"
        formatted_output="[$formatted_output_status] $local_branch"
        return
    fi

    # Not on track with remote
    local output_ahead output_behind output_ff_merge
    if [[ "$verbose" == 'true' ]]
    then
        output_ahead="[${num_ahead_remote} AHEAD]"
        output_behind="[${num_behind_remote} BEHIND]"
        [[ "$ff_merge_possible" == 'true' ]] && output_ff_merge="${COLOR_GREEN}[FAST-FORWARD]${COLOR_END}"
    else
        output_ahead="[${num_ahead_remote}>]"
        output_behind="[<${num_behind_remote}]"
        [[ "$ff_merge_possible" == 'true' ]] && output_ff_merge="${COLOR_GREEN}[ff]${COLOR_END}"
    fi

    (( num_ahead_remote != 0 )) && output_ahead="${COLOR_RED}${output_ahead}${COLOR_END}"
    (( num_behind_remote != 0 )) && output_behind="${COLOR_YELLOW}${output_behind}${COLOR_END}"

    formatted_output_status="$STATUS_AHEAD_BEHIND"
    formatted_output="${output_ahead}${output_behind}${output_ff_merge} $local_branch -> $remote_name/$remote_branch"
}

format_remote_branch_output_string()
{
    local array_index=$1

    local remote_branch="${array_remote_branch[array_index]}"

    formatted_output_status="$STATUS_NONE"
    formatted_output=''

    if [[ "${array_remote_branches_without_local[array_index]}" == 'true' ]]
    then
        formatted_output_status="$STATUS_NO_LOCAL"
        formatted_output="${COLOR_YELLOW}[$formatted_output_status]${COLOR_END} $remote_branch"
        return 0
    fi
}


store_formatted_output()
{
    local formatted_output_status="$1"
    local formatted_output="$2"

    case "$formatted_output_status" in
        "$STATUS_ON_TRACK")
            array_output_branch_on_track+=("$formatted_output")
            ;;
        "$STATUS_NO_REMOTE")
            array_output_branch_no_remote+=("$formatted_output")
            ;;
        "$STATUS_DELETED_REMOTE")
            array_output_branch_deleted_remote+=("$formatted_output")
            ;;
        "$STATUS_AHEAD_BEHIND")
            array_output_ahead_behind+=("$formatted_output")
            ;;
        "$STATUS_NO_LOCAL")
            array_output_branch_no_local+=("$formatted_output")
            ;;
        *)
            ;;
    esac
}

print_branches_on_track()
{
    print_array -e "${array_output_branch_on_track[@]}"
}

print_branches_no_remote()
{
    print_array -e "${array_output_branch_no_remote[@]}"
}

print_branches_no_local()
{
    print_array -e "${array_output_branch_no_local[@]}"
}

print_branches_remote_deleted()
{
    print_array -e "${array_output_branch_deleted_remote[@]}"
}

print_branches_ahead_behind()
{
    print_array -e "${array_output_ahead_behind[@]}"
}

register_help_text 'print_array' <<-'END_OF_HELP_TEXT'
print_array [flags] <array>

Output the array elements one by one with a new line per element.

<array>: Array elements given with ${array_name[@]}
END_OF_HELP_TEXT

register_function_flags 'print_array' \
                        '-e' '' 'false' \
                        "Corresponding echo '-e' flag. Enables interpretation of backslash escapes."

print_array()
{
    _handle_args_print_array "$@"
    local array=("${non_flagged_args[@]}")

    [[ -z "${array[@]}" ]] && return 1

    local flags=""
    [[ "$e_flag_print_array" == 'true' ]] && flags='-e'

    for element in "${array[@]}"
    do
        echo $flags "$element"
    done

    return 0
}

_handle_args_print_array()
{
    _handle_args 'print_array' "$@"

    if [[ "$e_flag" == 'true' ]]
    then
        e_flag_print_array='true'
    fi
}

handle_git_repo()
{
    local git_path="$1"
    local outfile="$2"

    # Open file descriptor 3 for writing to the output file
    exec 3>>"$outfile"
    # Redirect stdout to fd 3 (output file)
    exec 1> >(colorize '' >&3)
    # Redirect stderr to the colorize function, and then to fd 3 (output file)
    exec 2> >(colorize "$COLOR_RED" >&3)

    local is_submodule='false'
    [[ -f "$git_path" ]] && is_submodule='true'

    local submodule_indentation_number=10
    local indentation_number=0

    [[ "$is_submodule" == 'true' ]] && indentation_number=$submodule_indentation_number

    local repo_dir="${git_path%/.git}"

    pushd "$repo_dir" >/dev/null || return
    
    [[ "$(dirname "$git_path")" == '.' ]] && repo_dir="./$(basename $(pwd))"

    local all_output=""
    
    [[ "$do_prune" == 'true' ]] && local extra_fetch_flags='--prune'
    [[ "$no_fetch" != 'true' ]] && git fetch --all $extra_fetch_flags &> /dev/null

    # Array of all LOCAL branches
    local all_local_branches
    IFS=$'\n' all_local_branches=($(git for-each-ref --format="%(refname:short)" refs/heads))

    # Array of all REMOTE branches
    local all_remote_branches
    IFS=$'\n' all_remote_branches=($(git for-each-ref --format '%(refname:short)' refs/remotes))

    ###
    # Resulting global arrays
    # Filled by get_info_branch()
    array_local_branch=()
    array_remote_name=()
    array_remote_branch=()
    array_num_ahead_remote=()
    array_num_behind_remote=()
    array_ff_merge_possible=()
    # Filled by get_info_remote_branch()
    array_remote_branches_without_local=()
    # Output string arrays
    # Filled by store_formatted_output()
    array_output_branch_on_track=()
    array_output_branch_no_remote=()
    array_output_branch_deleted_remote=()
    array_output_ahead_behind=()
    #
    ###

    # Iterate through each LOCAL branch
    local array_index=0
    local local_branch
    for local_branch in "${all_local_branches[@]}"
    do
        get_info_local_branch "$local_branch"
        # Results: Appends to arrays
        # - array_local_branch
        # - array_remote_name
        # - array_remote_branch
        # - array_num_ahead_remote
        # - array_num_behind_remote
        # - array_ff_merge_possible

        format_local_branch_output_string "$array_index"
        # Results: Variables
        # - formatted_output
        # - formatted_output_status

        store_formatted_output "$formatted_output_status" \
                               "$formatted_output"
        # Results: Appends to arrays
        # - array_output_branch_on_track
        # - array_output_branch_no_remote
        # - array_output_branch_deleted_remote
        # - array_output_ahead_behind

        ((array_index++))
    done

    # Iterate through each REMOTE branch
    local array_index=0
    local remote_branch
    for remote_branch in "${all_remote_branches[@]}"
    do
        [[ "$remote_branch" == */HEAD ]] && continue

        get_info_remote_branch "$remote_branch"
        # Results: Appends to array
        # - array_remote_branches_without_local

        format_remote_branch_output_string "$array_index"
        # Results: Variables
        # - formatted_output
        # - formatted_output_status

        store_formatted_output "$formatted_output_status" \
                               "$formatted_output"
        # Results: Appends to array
        # - array_output_branch_no_local
    done

    # If fast forward is possible and flagged to be done, do fast forward merge

    local output_branches=""

    [[ "$show_on_track" == 'true' ]] &&
        { output_branches+=$(print_branches_on_track) && output_branches+='\n'; }

    [[ "$exclude_deleted_remote" != 'true' ]] &&
        { output_branches+=$(print_branches_remote_deleted) && output_branches+='\n'; }

    [[ "$exclude_no_remote" != 'true' ]] &&
        { output_branches+=$(print_branches_no_remote) && output_branches+='\n'; }

    [[ "$exclude_no_local" != 'true' ]] &&
        { output_branches+=$(print_branches_no_local) && output_branches+='\n'; }

    [[ "$show_branches_ahead_behind" == 'true' ]] &&
        output_branches=$(print_branches_ahead_behind)

    [[ -n "$output_branches" ]] &&
        all_output+="Other branches:\n${output_branches}"

    local output_current_branch=""
    local current_branch=$(git rev-parse --abbrev-ref HEAD)

    if [[ "$only_file_changes" != 'true' ]]
    then
        local array_index
        local in_branch='false'

        for array_index in ${!array_local_branch[@]}
        do
            if [[ "${array_local_branch[array_index]}" == "$current_branch" ]]
            then
                in_branch='true'
                break
            fi
        done

        # If not repo_dot_git_dir, 'current_branch' is probably HEAD
        if [[ "$in_branch" == 'true' ]]
        then
            format_local_branch_output_string "$array_index"

            store_formatted_output "$formatted_output_status" \
                                   "$formatted_output"

            if ! ( [[ "$verbose" != 'true' ]] && [[ "$formatted_output" == *'[ON TRACK]'* ]] )
            then
                output_current_branch+="$formatted_output"
            fi
        fi
    fi

    local output_index_working_tree_status="$(index_working_tree_status)"

    [[ -n "$output_current_branch" && -n "$output_index_working_tree_status" ]] &&
        output_current_branch+="\n"

    output_current_branch+="${output_index_working_tree_status}"

    if [[ -n "$output_current_branch" ]]
    then
        [[ -n "$output_branches" ]] && all_output+="\n\n"
        all_output+="Current branch: ${current_branch}"
        [[ "$current_branch" == 'HEAD' ]] && all_output+=" (Detached state)"
        all_output+="\n${output_current_branch}"
    elif [[ "$in_branch" != 'true' ]]
    then
        [[ -n "$output_branches" ]] && all_output+="\n\n"
        all_output+="Current branch: ${current_branch}"
        [[ "$current_branch" == 'HEAD' ]] && all_output+=" (Detached state)"
    fi

    if [[ -n "$all_output" ]]
    then
        [[ "$verbose" == 'true' ]] && echo
        create_repo_divider "$is_submodule" "$indentation_number" "$repo_dir"

        local indentation=''
        local character=' '
        if (( indentation_number != 0 ))
        then
            indentation=$(printf "%.s$character" $(seq $indentation_number))
            all_output=$(echo -e "$all_output" | sed "s/^/${indentation}/")
        fi

        echo "$all_output"
    else
        if [[ "$exclude_no_news" != 'true' ]]
        then
            [[ "$verbose" == 'true' ]] && echo
            create_repo_divider "$is_submodule" "$indentation_number" "$repo_dir"
        fi
    fi

    # 1 newline after this, means beginning of next. Something above is printing newline even though it shouldn't

    popd >/dev/null

    exec 1>/dev/tty
    exec 2>/dev/tty
}

create_repo_divider()
{
    local is_submodule="$1"
    local indentation_number="$2"
    local repo_dir="$3"

    [[ -z "$is_submodule" || -z "$repo_dir" ]] && return 1

    local git_type_text
    local character_start
    local character_end
    local num_characters_start
    if [[ "$is_submodule" == 'true' ]]
    then
        git_type_text='Submodule'
        character_start='='
        character_end='='
        num_characters_start=5
    else
        git_type_text='Repo'
        character_start='='
        character_end='='
        num_characters_start=5
    fi

    local line=''
    (( indentation_number > 0 )) &&
        line="$(printf "%.s " $(seq $indentation_number))"
    line+="$(printf "%.s=" $(seq $num_characters_start)) ${git_type_text}: $repo_dir "

    local line_length=$(wc -m <<< "$line")
    array_flag_description_line+=("$flag_description_line")

    # Update COLUMNS regardless if shopt checkwinsize is enabled
    if [[ -c /dev/tty ]]
    then
        # Pass /dev/tty to the command as if running as background process, the shell
        # is not attached to a terminal
        IFS=' ' read LINES COLUMNS < <(stty size </dev/tty)
    else
        COLUMNS=80
    fi

    if (( COLUMNS > line_length ))
    then
        characters_width_left=$((COLUMNS - line_length))
    else
        characters_width_left=$num_characters_start
    fi

    line+="$(printf "%.s$character_end" $(seq $characters_width_left))"

    output="${COLOR_BLUE}${line}${COLOR_END}"
    echo -e "$output"
}

update_indicator_state()
{
    case $((indicator_counter++)) in
        1)
            indicator='/'
            ;;
        2)
            indicator='-'
            ;;
        3)
            indicator='\'
            ;;
        4)
            indicator='|'
            indicator_counter=1
            ;;
    esac
}

update_repositories_checked_loading_bar()
{
    local line_1="Repositories checked:"
    local line_2

    if (( num_processes_done == num_total_processes ))
    then
        line_2="***** $num_processes_done/$num_total_processes *****\n"
    else
        line_2="***** [$indicator] $num_processes_done/$num_total_processes *****"
    fi

    output_replace_last_2_lines "$line_1" "$line_2"
}

output_replace_last_2_lines()
{
    local line_1="$1"
    local line_2="$2"

    # Buffer both lines to have less flickering in the terminal output
    output_lines="${MOVE_CURSOR_UP}${CLEAR_TO_END_OF_LINE}${line_1}${MOVE_CURSOR_DOWN}${CLEAR_TO_END_OF_LINE}${line_2}"

    printf "%b" "$output_lines"
}

find_repositories()
{
    for repo_dot_git_dir in $(find "$base_dir" \( -type d -o -type f \) -name ".git")
    do
        if [[ -f "$repo_dot_git_dir" ]]
        then
            # .git indicates this is a Git Submodule
            [[ "$exclude_submodule" == 'true' ]] && continue
        else
            # .git indicates this is a normal Git Repository
            :
        fi

        repositories+=("$repo_dot_git_dir")
    done
}

is_all_processes_done()
{
    all_processes_done='true'

    for i in "${!processes_done[@]}"
    do
        if [[ "${processes_done[i]}" != 'true' ]]
        then # Process is not done previous iteration check
            # Check if process is done now

            local is_process_done='false'
            kill -0 ${processes_id[i]} 2>/dev/null ||
                is_process_done='true'

            if [[ "$is_process_done" == 'true' ]]
            then
                processes_done[i]='true'
                ((num_processes_done++))
            else
                # Not done
                all_processes_done='false'
                local processes_left=$((num_total_processes - num_processes_done))

                check_if_stuck
            fi
        fi
    done

    [[ "$all_processes_done" == 'true' ]]
}

check_if_stuck()
{
    if (( processes_left <= 5 )) &&
       (( counter_iterations_same_num_processes >= 10 ))
    then
        if [[ "${process_indicated_stuck[i]}" != 'true' ]]
        then
            line_1="${COLOR_YELLOW}Repo is taking time: '$(dirname "${processes_name[i]}")'${COLOR_END}"
            line_2=""

            output_replace_last_2_lines "$line_1" "$line_2"
            printf '\n\n'

            process_indicated_stuck[i]='true'
        fi
    fi
}

update_stuck_statistics()
{
    if (( num_processes_done_previous_iteration == $num_processes_done))
    then
        ((counter_iterations_same_num_processes++))
    else
        counter_iterations_same_num_processes=0
    fi

    num_processes_done_previous_iteration=$num_processes_done
}

output_from_background_jobs()
{
    local num_output_files="$(ls -1 "$tmpdir" | wc -l)"

    if (( num_output_files != 0 ))
    then
        # Output everythings from background jobs
        if [[ "$verbose" == 'true' ]]
        then
            cat "$tmpdir"/*
        else
            for file in "$tmpdir"/*
            do
                if (( $(wc -l < "$file") > 0 ))
                then
                    echo
                    cat "$file"
                fi
            done
        fi
    fi
}

main_stderr_red()
{
    main "$@" 2> >(sed $'s|.*|\e[31m&\e[m|' >&2)
}

#################
### Call main ###
#################
main_stderr_red "$@"
#################
